class matrix: 
    #m = rows 
    #n = cols

    def __init__(self,rows, cols , data = []):
        self.rows = rows 
        self.cols = cols 
        
        if data:
            
            self.data = data 
        else: 
            self.data = [0] * (self.rows * self.cols) 

    def __getitem__(self,key):
        i, j = key
        return self.data[(j-1) + (i - 1) * self.cols]

    def __setitem__(self, key, value):
        i, j = key  
        self.data[(j-1) + (i-1) * self.cols] = value

    """def _samesize_(self,c,d): 
        return True if c.rows == d.rows and c.cols == d.cols else False"""

    def _samesize_(self,a,b):
        return True if a.rows == b.rows and a.cols == b.cols else False

    def __radd__(self, other): 
        return self.__add__(other) 

    def __rsub__(self, other): 
        return self.__sub__(other) 

    def __rmul__(self, other): 
        return self.__mult__(other) 

    def __rdiv__(self, other): 
        return self.__truediv__(other) 

    

    def __add__(self, other):
        res = matrix(self.rows , self.cols) 
        if type(other) == int or type(other) == float:  
            for i in  range(1,self.rows + 1):
                for j in range(1,self.cols + 1):
                    res[i, j] = self [i, j] + other
        
                return res 

        elif type(other) == matrix: 
            if self._samesize_(self, other):
                for i in  range(1,self.rows + 1):
                    for j in range(1,self.cols + 1):
                        res[i, j] = self [i, j] + other [i, j]

                return res
            else: 
                print("matrix de tamanhos diferentes!")
        else:
            print("nao é nem numero nem matrix")     


    def __sub__(self, other):
        res = matrix(self.rows, self.cols)
        if type(other) == int or type(other) == float:
            for i in range(1,self.rows + 1):
                for j in range(1,self.cols + 1):
                    res[i, j] = self[i, j] - other

            return res
        elif type(other) == matrix:
            if self._samesize_(self, other):
                for i in range(1,self.rows + 1):
                    for j in range(1,self.cols + 1):
                        res[i, j] = self[i, j] - other[i, j]

                return res
            else:
                print("Matrizes de tamanhos diferentes!") 
        else:
            print("Incapaz de subtrair!")


    def __mul__(self, other):
        res = matrix(self.rows, self.cols)
        
        if type(other) == int or type(other) == float:
            for i in range(1,self.rows + 1):
                for j in range(1,self.cols + 1):
                    res[i, j] = self[i, j] * other

            return res
        elif type(other) == matrix:
            if self._samesize_(self, other):
                for i in range(1,self.rows + 1):
                    for j in range(1,self.cols + 1):
                        res[i, j] = self[i, j] * other[i, j]

                return res
            else:
                print("Matrizes de tamanhos diferentes!") 
        else:
            print("Incapaz de multiplicar!")
        


    def __truediv__(self, other):
        res = matrix(self.rows , self.cols)
        if type(other) == int or type(other) == float:  
            for i in range(1, self.rows + 1): 
                for j in range(1, self.cols + 1): 
                    res[i, j] = self[i, j] / other  
        
            return res  

        elif type(other) == matrix: 
            if self._samesize_(self, other): 
                res = matrix(self.rows , self.cols) 
                for i in range(1, self.rows + 1): 
                    for j in range(1, self.cols + 1): 
                        res[i, j] = self[i, j] / other[i, j]

                return res 
            else: 
                print("matrix de tamanhos diferentes!")
        else:
            print("nao é nem numero nem matrix") 



    def dot(self, other): 
        res = matrix(self.rows, other.cols) 

        for i in range(1,self.rows + 1): 
            for j in range(1, other.cols + 1): 
                for k in range(1, self.cols + 1): 
                    res[i, j] = self[i, k] * other [k, j] + res[i,j] 
        
        return res 

    def gauss(self):
        res = matrix(self.rows, self.cols, self.data.copy())
        newma = res
        for i in range(1, newma.rows):
            maximoElemento = abs(newma[i, i])
            maximaLinha = i 
            for k in range(i +1,newma.rows+1):
                if abs(newma[k, i]) > maximoElemento:
                    maximoElemento = abs(newma[k, i])
                    maximaLinha = k
            for k in range(i, newma.cols+1): 
                newma[maximaLinha, k],newma[i, k] = newma[i, k],newma[maximaLinha, k] 

            for k in range(i + 1, newma.rows+1):
                d = -newma[k, i]/newma[i, i] 
                for j in range (i , newma.cols +1):
                    if (i == j):
                        newma[k, j] = 0
                    else:
                        newma[k, j] += d * newma[i, j]

        listaR = [1 for i in range(newma.rows+1)]
        for i in range(newma.rows, 0, -1):
            listaR[i] = newma[i, newma.rows+1]/newma[i,i]
            for j in range(i-1,0,-1):
                newma[j,newma.rows+1] -= newma[j, i] * listaR[i]

        for i in range(1, newma.rows + 1):
            for j in range(1, newma.cols + 1):
                if(i == j):
                    res[i,j] = 1
                elif(newma.cols  == j):
                    res[i,j] = listaR[i]
                else:
                    res[i,j] = 0
        
        return res


