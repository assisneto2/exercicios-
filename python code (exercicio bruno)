class matrix: 
    #m = rows 
    #n = cols

    def __init__(self,rows, cols , data = []):
        self.rows = rows 
        self.cols = cols 
        
        if data:
            
            self.data = data 
        else: 
            self.data = [0] * (self.rows * self.cols) 

    def __getitem__(self,key):
        i, j = key
        return self.data[(j-1) + (i - 1) * self.cols]

    def __setitem__(self, key, value):
        i, j = key  
        self.data[(j-1) + (i-1) * self.cols] = value



    def __radd__(self, other): 
        return self.__add__(other) 

    def __add__(self, other):
        if type(other) == int or type(other) == float:  
                res = matrix(self.rows , self.cols) 
                for i in  range(1,self.rows + 1):
                    for j in range(1,self.cols + 1):
                        res[i, j] = self [i, j] + other
        
                return res 

        elif type(other) == matrix: 
            if self._samesize_(self, other):
                res = matrix(self.rows , self.cols) 
                for i in  range(1,self.rows + 1):
                    for j in range(1,self.cols + 1):
                        res[i, j] = self [i, j] + other [i, j]

                return res
            else: 
                print("matrix de tamanhos diferentes!")
        else:
            print("nao Ã© nem numero nem matrix")     



    def __rsub__(self, other): 
        return self.__sub__(other) 

    def __sub__(self, other):
        if type(other) == int or type(other) == float: 
            res = matrix(self.rows , self.cols) 
            for i in  range(1,self.rows + 1):
                for j in range(1,self.cols + 1):
                    res[i, j] = self [i, j] - other

            return res

        elif type(other) == matrix:
            res = matrix(self.rows , self.cols) 
            for i in  range(1,self.rows + 1):
                for j in range(1,self.cols + 1):
                    res[i, j] = self [i, j] - other

            return res 


    def __rmult__(self, other): 
        return self.__mult__(other) 

    def __mult__(self, other):
        if type(other) == int or type(other) == float: 
            res = matrix(self.rows , self.cols) 
            for i in range(1, self.rows + 1): 
                for j in range(1, self.cols + 1): 
                    res[i, j] = self[i, j] * other  
            
            return res  

        elif type(other) == matrix: 
            res = matrix(self.rows , self.cols) 
            for i in range(1, self.rows + 1): 
                for j in range(1, self.cols + 1): 
                    res[i, j] = self[i, j] * other[i, j]

            return res 



    def __rdiv__(self, other): 
        return self.__truediv__(other) 

    def __truediv__(self, other):
        if type(other) == int or type(other) == float: 
            res = matrix(self.rows , self.cols) 
            for i in range(1, self.rows + 1): 
                for j in range(1, self.cols + 1): 
                    res[i, j] = self[i, j] / other  
        
            return res  

        elif type(other) == matrix: 
            res = matrix(self.rows , self.cols) 
            for i in range(1, self.rows + 1): 
                for j in range(1, self.cols + 1): 
                    res[i, j] = self[i, j] / other[i, j]

            return res 



    def dot(self, other): 
        res = matrix(self.rows, other.cols) 

        for i in range(1,self.rows + 1): 
            for j in range(1, other.cols + 1): 
                for k in range(1, self.cols + 1): 
                    res[i, j] = self[i, k] * other [k, j] + res[i,j] 
        
        return res 

    def _samesize_(self,c,d): 
        return True if c.rows == d.rows and c.cols == d.cols else False 

